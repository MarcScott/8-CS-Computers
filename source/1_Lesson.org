#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil
#+TITLE: How A Computer Works
#+AUTHOR: Marc Scott updated badge tasks PD

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/8-CS-Computers">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
            <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* Binary
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
To understand a little about how computers work, you'll need to know about binary.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- If you were asked to count to nine, then you'd probably do something along the lines of the following. (Click to reset)
#+BEGIN_HTML
<object data="js/countingToNine.html" width='600px' height='100px'></object>
#+END_HTML
- But what happens when you want to go higher than nine?
- You suddenly run out of new numbers and have to reuse digits you've already used.
#+BEGIN_HTML
<object data="js/countingDenary.html" width='600px' height='100px'></object>
#+END_HTML
- The counting system we use is called base 10, often called /denary/. This means we have 10 unique numbers (0 up to 9). When we start counting and reach the number 9 and want to continue, we use a preceding 1 (to indicate that we have a single unit of 'tens'), and then start counting from 0 again.
- You've probably not given much thought to why we count in 10's but a simple explanation has been provided by Georges Ifrah in his book /The Universal History of Numbers/.
#+BEGIN_QUOTE
Traces of the anthropomorphic origin of counting systems can be found in many languages. In the Ali language (Central Africa), for example, "five" and "ten" are respectively moro and mbouna: moro is actually the word for "hand" and mbouna is a contraction of moro ("five") and bouna, meaning "two" (thus "ten"="two hands").

It is therefore very probable that the Indo-European, Semitic and Mongolian words for the first ten numbers derive from expressions related to finger-counting. But this is an unverifiable hypothesis, since the original meanings of the names of the numbers have been lost.
#+END_QUOTE
- What this basically means is that we're not 100% sure why we count in 10s, but it's probably because we have ten fingers.
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
- Not all cultures count using base 10.
- Conduct some research online to see if you can find out about other numbering systems used by other cultures.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- Computers *don't use base 10*
- Computers chips are basically constructed from transistors that are organised to act as switches.
- You'll learn more about transistors in the next lesson, but for now think of each transistor as a switch. I can be /ON/ or /OFF/ (in much the same way as a light-switch can). 
- This means that computers use a base 2 numbering system, called *binary*. /ON/ is represented by the number 1 and /OFF/ is represented by the number 0.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- Counting in binary looks like this
#+BEGIN_HTML
<object data="js/countingBinary.html" width='800px' height='100px'></object>
#+END_HTML
- You can compare binary and denary numbers below.
#+BEGIN_HTML
<object data="js/countingBoth.html" width='600px' height='100px'></object>
#+END_HTML
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- You can convert between binary and denary or denary and binary fairly easily.
- The exercises below will help you learn how to do this.
- To convert from binary - denary
  1. Click on the cards, so that they flip over, until the number shown below the cards matches the binary number you are trying to convert. (ignoring preceding 0's)
  2. Count the number of spots that are displayed in total. 
  3. This is your denary number.
- To convert from denary - binary
  1. Click on the cards to flip them until you have the correct number of spots showing, equal to the denary number you are trying to convert.
  2. Read off the binary number (ignoring preceding 0's) that are displayed below.
#+BEGIN_HTML
<object data="js/binary-denary.html" width='350px' height='250px'></object>
#+END_HTML
- Try converting 1001 from binary into denary, you should get the number 9
- Try converting 19 from denary into binary, you should get the number 10011
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- Have you figured out the general method yet?
- Notice how many spots are on each card - 1,2,4,8,16....
- Let's see if we can use this pattern to convert larger binary numbers.
- Let's try the number =10100110=
- The number consists of 8 /bits/ (We use the term bit to describe each unit)
- Let's write out the number
#+BEGIN_EXAMPLE
1   0   1   0   0   1   1   0
#+END_EXAMPLE
- Now above the binary number, write the number of spots that would have appeared on each card. (Start on the right, with the number =1= and then double it each time.
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   0   1   0   0   1   1   0
#+END_EXAMPLE
- Now multiply each bit by the denary number above it.
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   0   1   0   0   1   1   0 X
-----------------------------
128 0   32  0   0   4   2   0 
#+END_EXAMPLE
- Now calculate the sum of these numbers
#+BEGIN_EXAMPLE
128 + 32 + 4 + 2 = 166
#+END_EXAMPLE
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Have a go yourself with the following binary numbers - =1001011=, =1110110=, =11111111=
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- To get you Silver Badge convert the following numbers from binary to denary

*One*
   
|128|64|32|16|8  |4 |2 |1 |Total |
| 0	| 1|0|0  |0  |1 |1 |0 |Ans here |

*Two*

|128|64|32|16|8  |4 |2 |1 |Total |
| 1  | 0 |0|1|1  |0 |0 |0 | Ans here|

*Three*

|128|64|32|16|8  |4 |2 |1 |Total |
| 0  | 0 |1 |1|1  |1 |1 |1 | Ans here|

*Four*

|128|64|32|16|8  |4 |2 |1 |Total |
| 0  | 1 |1 |0 |1  |0 |1 |1 | Ans here|

*Five*

|128|64|32|16|8  |4 |2 |1 |Total |
| 1  | 0 |0|1|0  |1 |0 |1 | Ans here|	

*Six*
|0|	1|1|1|1|0|0|1 Ans here|	


** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- Let's try converting from denary to binary.
- We'll use the number 200.
- We'll start by writing out the spots that would have been on the cards.
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
#+END_EXAMPLE
- Now we need to do a little mental arithmetic. Starting from the left, we see that the number 128 can /go into/ 200. 200/128 = 1 with a remainder of 72.
- Let's write a 1 below the 128
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1
#+END_EXAMPLE
- We're left with a 72 remainder.
- We now move to the next number - 64. 64 can /go into/ 72. 72/64 = 1 remainder 8
- Let's write a 1 below the 64.
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   1
#+END_EXAMPLE
- We're left with an 8 remainder.
- We now move to the next number - 32. 32 can not /go into/ 8.
- So we write a 0 below the number 32
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   1   0
#+END_EXAMPLE
- We still have the remainder 8. 16 can not /go into/ 8
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   1   0   0
#+END_EXAMPLE
- We still have the remainder 8. 8 can /go into/ 8 with a remainder of 0.
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   1   0   0   1
#+END_EXAMPLE
- As all we have left is 0, we can add trailing 0's to our number.
#+BEGIN_EXAMPLE
128 64  32  16  8   4   2   1
1   1   0   0   1   0   0   0
#+END_EXAMPLE
- So our binary number is =11001000=
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Have a go yourself with the following practise denary numbers -

*Example A*

|Denary|	128|	64|	32|	16|	8|	4|	2|	1|
|47	 |||||||||							

*Example B*

|Denary|	128|	64|	32|	16|	8|	4|	2|	1|
|128 |||||||||								

*Example C*

|Denary|	128|	64|	32|	16|	8|	4|	2|	1|
|201 |||||||||


** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- To get your Gold Badge convert the following numbers from denary to binary

*One*
  
|Denary|	128|	64|	32|	16|	8|	4|	2|	1|
|97	|||||||||							

*Two*

|Denary|	128|	64|	32|	16|	8|	4|	2|	1|
|134|||||||||								

*Three*

|Denary|	128|	64|	32|	16|	8|	4|	2|	1|
|230|||||||||								

*Four*
- =21=
*Five*
- =49=
*Six*
- =17=
*Seven*
- =183=
*Eight*
- =200=

* Adding in Binary
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
 
- Adding binary numbers is pretty much the same as adding denary numbers.
  - 0 + 0 = 0
  - 0 + 1 = 1
  - 1 + 0 = 1
  - 1 + 1 = 10 (or 0 and carry the 1)
  - 1 + 1 + 1 = 11 (or 1 and carry the 1)
- Try performing the following additions
  - 100 + 11
  - 100 + 100
  - 100 + 1100
  - 11001 + 10101
