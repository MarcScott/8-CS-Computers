#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil
#+TITLE: How A Computer Works
#+AUTHOR: Marc Scott

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/8-CS-Computers">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>

      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* Simplifying NAND gates
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- NAND gates are really useful, but it would be annoying to have to draw the transistors every time.
- Instead we use a symbol like the one shown below. You can click the buttons and compare it to the transistor version below it, to see that they are identical in function.
#+BEGIN_HTML
<object data="js/NAND.html" width='200px' height='200px'></object>
#+END_HTML
------
#+BEGIN_HTML
<object data="js/TranNAND.html" width='300px' height='320px'></object>
#+END_HTML
* Combining NAND gates
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- NAND gates are said to be /universal logical gates/ because you can make all other types of logic gate out of them.
- We can take a single NAND gate like this one.
#+BEGIN_HTML
<object data="js/NANDabs.html" width='200px' height='100px'></object>
#+END_HTML
- And use it to make this
#+BEGIN_HTML
<object data="js/ANDfromNANDS.html" width='300px' height='100px'></object>
#+END_HTML
- This is called an AND gate.

- [[http://logic.ly/demo/][Here]] is an online gate builder which is a nice way to visualise what is happening.


* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Have a look at the below. This is the arrangement for a NOT gate, sometimes called an inverter.
- Construct a Truth table for the arrangement, showing input A output Q.
http://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/NOT_from_NAND.svg/240px-NOT_from_NAND.svg.png
| A | Q |
|---+---|
| 0 |   |
| 1 |   |

* Making other gates from NAND gates
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- We've already seen one other gate that can be made using NAND gates - it was called an AND gate.
- Below is the diagram for the NAND gate arrangements for an AND gate again, and a simplified symbol for an AND gate that is commonly used.
#+BEGIN_HTML
<object data="js/ANDfromNANDS.html" width='300px' height='100px'></object>
#+END_HTML
#+BEGIN_HTML
<object data="js/AND.html" width='200px' height='100px'></object>
#+END_HTML
- Hopefully you can see that the two are identical. When inputs A and B are on, output Q is on. When either or both A and B are off, Q is off.
- The AND gate has a very similar symbol to the NAND gate (it's just missing the little circle near the output) so make sure you don't get the two confused.
- The truth table for an AND gate looks like this
| A | B | Q |
|---+---+---|
| 0 | 0 | 0 |
| 1 | 0 | 0 |
| 0 | 1 | 0 |
| 1 | 1 | 1 |
* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- [[http://www.bbc.co.uk/education/clips/zsbdq6f][Click on this link to watch a short video on the introduction to logic gates.]]
- Look at the diagrams below, showing other NAND gate arrangements. These are called OR, NOR and XOR gates.
- For each one, draw a Truth Table showing inputs and outputs.
-----
- OR gate
http://www.bbc.co.uk/staticarchive/d54b529f27568c81cca1caff755793f853e9cd4e.gif
-----
- NOR gate
https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/NOR_ANSI_Labelled.svg/220px-NOR_ANSI_Labelled.svg.png
-----
- XOR gate
https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Xor-gate-en.svg/320px-Xor-gate-en.svg.png

* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- There is a special arrangement of NAND gates called a D-Latch.
- Use the Web to find out what the arrangement of NAND gates in a D-Latch is.
- Write a description of a D-Latch and explain why it is useful in computing.


